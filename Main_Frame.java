/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package FirstGUIpackage;

import java.io.*;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.undo.CannotRedoException;
import javax.swing.undo.UndoManager;
import javax.swing.text.Element;


/**
 *
 * @author kshitij
 */
public class Main_Frame extends javax.swing.JFrame {
        
    String filename;
    String filecontent;
    JFileChooser jc= new JFileChooser("C:\\Users\\kshitij\\Desktop\\Ravintor's saved texts");
    /**
     * Creates new form Main_Frame
     */
    public Main_Frame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        lines = new javax.swing.JTextArea();
        textArea = new javax.swing.JTextArea();
        Project_Tree = new javax.swing.JInternalFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jInternalFrame2 = new javax.swing.JInternalFrame();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        MainMenu = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        NewFile = new javax.swing.JMenuItem();
        mnitmOpen = new javax.swing.JMenuItem();
        Save = new javax.swing.JMenuItem();
        SaveAs = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mnitmExit = new javax.swing.JMenuItem();
        mEdit = new javax.swing.JMenu();
        iundo = new javax.swing.JMenuItem();
        iredo = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        Cut = new javax.swing.JMenuItem();
        Copy = new javax.swing.JMenuItem();
        Paste = new javax.swing.JMenuItem();
        mnitmDelete = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        mnitmFind = new javax.swing.JMenuItem();
        mnitmFindNext = new javax.swing.JMenuItem();
        mnitmFindPrevious = new javax.swing.JMenuItem();
        mnitmReplace = new javax.swing.JMenuItem();
        mnitmGoTo = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        mnitmSelectAll = new javax.swing.JMenuItem();
        mnitmTimeDate = new javax.swing.JMenuItem();
        mFormat = new javax.swing.JMenu();
        mnitmWordWrap = new javax.swing.JMenuItem();
        mnitmFont = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        mView = new javax.swing.JMenu();
        mnitmZoom = new javax.swing.JMenu();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();
        mnitmStatusBar = new javax.swing.JCheckBoxMenuItem();
        mHelp = new javax.swing.JMenu();
        mnitmViewhelp = new javax.swing.JMenuItem();
        mnitmSendFeedback = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        mnitmAboutNotepad = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane4.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane4.setAutoscrolls(true);

        lines.setEditable(false);
        lines.setBackground(new java.awt.Color(204, 204, 204));
        lines.setColumns(20);
        lines.setRows(5);
        lines.setText("1");

        textArea.setColumns(20);
        textArea.setRows(5);
        textArea.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                textAreaCaretUpdate(evt);
            }
        });
        textArea.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                textAreaInputMethodTextChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lines, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textArea, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lines, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                    .addComponent(textArea))
                .addContainerGap())
        );

        jTabbedPane3.addTab("tab1", jPanel1);

        jScrollPane4.setViewportView(jTabbedPane3);

        jScrollPane4.getViewport().add(textArea);
        jScrollPane4.setRowHeaderView(lines);

        Project_Tree.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        Project_Tree.setIconifiable(true);
        Project_Tree.setMaximizable(true);
        Project_Tree.setResizable(true);
        Project_Tree.setTitle("Project Tree");
        Project_Tree.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Project_Tree.setVisible(true);

        String direc = "C:\\Users\\kshitij\\Desktop\\Ravintor's saved texts";
        jTree1.setModel(new FileSystemModel(new File(direc)));
        jScrollPane1.setViewportView(jTree1);

        javax.swing.GroupLayout Project_TreeLayout = new javax.swing.GroupLayout(Project_Tree.getContentPane());
        Project_Tree.getContentPane().setLayout(Project_TreeLayout);
        Project_TreeLayout.setHorizontalGroup(
            Project_TreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Project_TreeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                .addContainerGap())
        );
        Project_TreeLayout.setVerticalGroup(
            Project_TreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Project_TreeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                .addContainerGap())
        );

        jInternalFrame1.setResizable(true);
        jInternalFrame1.setTitle("Navigator");
        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jInternalFrame2.setTitle("Command Area");
        jInternalFrame2.setVisible(true);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jTabbedPane1.addTab("tab1", jScrollPane2);

        javax.swing.GroupLayout jInternalFrame2Layout = new javax.swing.GroupLayout(jInternalFrame2.getContentPane());
        jInternalFrame2.getContentPane().setLayout(jInternalFrame2Layout);
        jInternalFrame2Layout.setHorizontalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        jInternalFrame2Layout.setVerticalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
        );

        File.setText("File");

        NewFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        NewFile.setText("New File...");
        NewFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewFileActionPerformed(evt);
            }
        });
        File.add(NewFile);

        mnitmOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        mnitmOpen.setText("Open...");
        mnitmOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnitmOpenActionPerformed(evt);
            }
        });
        File.add(mnitmOpen);

        Save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });
        File.add(Save);

        SaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        SaveAs.setText("Save As...");
        SaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveAsActionPerformed(evt);
            }
        });
        File.add(SaveAs);
        File.add(jSeparator1);

        mnitmExit.setText("Exit");
        mnitmExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnitmExitActionPerformed(evt);
            }
        });
        File.add(mnitmExit);

        MainMenu.add(File);

        mEdit.setText("Edit");

        iundo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        iundo.setText("Undo");
        iundo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iundoActionPerformed(evt);
            }
        });
        mEdit.add(iundo);

        iredo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        iredo.setText("Redo");
        iredo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iredoActionPerformed(evt);
            }
        });
        mEdit.add(iredo);
        mEdit.add(jSeparator4);

        Cut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        Cut.setText("Cut");
        Cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CutActionPerformed(evt);
            }
        });
        mEdit.add(Cut);

        Copy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        Copy.setText("Copy");
        Copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyActionPerformed(evt);
            }
        });
        mEdit.add(Copy);

        Paste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        Paste.setText("Paste");
        Paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasteActionPerformed(evt);
            }
        });
        mEdit.add(Paste);

        mnitmDelete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        mnitmDelete.setText("Delete");
        mEdit.add(mnitmDelete);
        mEdit.add(jSeparator5);

        mnitmFind.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        mnitmFind.setText("Find...");
        mEdit.add(mnitmFind);

        mnitmFindNext.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        mnitmFindNext.setText("Find Next");
        mEdit.add(mnitmFindNext);

        mnitmFindPrevious.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, java.awt.event.InputEvent.SHIFT_MASK));
        mnitmFindPrevious.setText("Find Previous");
        mEdit.add(mnitmFindPrevious);

        mnitmReplace.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        mnitmReplace.setText("Replace");
        mEdit.add(mnitmReplace);

        mnitmGoTo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        mnitmGoTo.setText("Go To...");
        mEdit.add(mnitmGoTo);
        mEdit.add(jSeparator6);

        mnitmSelectAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        mnitmSelectAll.setText("Select All");
        mEdit.add(mnitmSelectAll);

        mnitmTimeDate.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        mnitmTimeDate.setText("Time/Date");
        mEdit.add(mnitmTimeDate);

        MainMenu.add(mEdit);

        mFormat.setText("Run");

        mnitmWordWrap.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, java.awt.event.InputEvent.ALT_MASK));
        mnitmWordWrap.setText("Compile");
        mFormat.add(mnitmWordWrap);

        mnitmFont.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, java.awt.event.InputEvent.CTRL_MASK));
        mnitmFont.setText("Run");
        mFormat.add(mnitmFont);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem1.setText("Compile & Run");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        mFormat.add(jMenuItem1);

        MainMenu.add(mFormat);

        mView.setText("View");

        mnitmZoom.setText("Zoom");

        jMenuItem13.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_PLUS, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem13.setText("Zoom In");
        mnitmZoom.add(jMenuItem13);

        jMenuItem14.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_MINUS, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem14.setText("Zoom Out");
        mnitmZoom.add(jMenuItem14);

        jMenuItem15.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_0, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem15.setText("Restore Default Zoom");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem15ActionPerformed(evt);
            }
        });
        mnitmZoom.add(jMenuItem15);

        mView.add(mnitmZoom);

        mnitmStatusBar.setSelected(true);
        mnitmStatusBar.setText("Status Bar");
        mnitmStatusBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnitmStatusBarActionPerformed(evt);
            }
        });
        mView.add(mnitmStatusBar);

        MainMenu.add(mView);

        mHelp.setText("Help");

        mnitmViewhelp.setText("View Help");
        mnitmViewhelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnitmViewhelpActionPerformed(evt);
            }
        });
        mHelp.add(mnitmViewhelp);

        mnitmSendFeedback.setText("Send Feedback");
        mHelp.add(mnitmSendFeedback);
        mHelp.add(jSeparator2);

        mnitmAboutNotepad.setText("About Notepad");
        mnitmAboutNotepad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnitmAboutNotepadActionPerformed(evt);
            }
        });
        mHelp.add(mnitmAboutNotepad);

        MainMenu.add(mHelp);

        setJMenuBar(MainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Project_Tree)
                    .addComponent(jInternalFrame1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jInternalFrame2)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Project_Tree)
                    .addComponent(jScrollPane4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jInternalFrame2)
                    .addComponent(jInternalFrame1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NewFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewFileActionPerformed
        if (!textArea.getText().equals("") && !textArea.getText().equals(filecontent)) {
            if (filename == null) {
                int option = JOptionPane.showConfirmDialog(rootPane, "Do you want to save the changes?");
                if (option == 0) {
                    PrintWriter fws = null;
                    int retval = -1;
                    try {
                        if (filename == null) {
                            jc.setDialogTitle("Save File...");
                            retval = jc.showSaveDialog(this);
                            if (retval == JFileChooser.APPROVE_OPTION) {
                                fws = new PrintWriter(new FileWriter(jc.getSelectedFile()));

                            }
                            String save = textArea.getText();
                            StringTokenizer st = new StringTokenizer(save, System.getProperty("line.separator"));
                            while (st.hasMoreElements()) {
                                fws.println(st.nextToken());
                            }

                            fws.close();
                            JOptionPane.showMessageDialog(rootPane, "File Saved");
                            filename = jc.getSelectedFile().getName();
                            setTitle(filename);
                        } else {
                            fws = new PrintWriter(new FileWriter(filename));
                            String save = textArea.getText();
                            StringTokenizer st = new StringTokenizer(save, System.getProperty("line.separator"));
                            while (st.hasMoreElements()) {
                                fws.println(st.nextToken());

                            }

                            fws.close();
                            JOptionPane.showMessageDialog(rootPane, "File Saved");

                        }
                    } catch (IOException e) {
                        System.out.println(e);
                    }

                } else {
                    textArea.setText(null);
                    setTitle("Untitled Notepad");
                    filename = null;
                    filecontent = null;
                }
            } else {
                int option = JOptionPane.showConfirmDialog(rootPane, "Do you want to save the changes?");
                PrintWriter fws = null;
                int retval = -1;
                try {
                    if (filename == null) {
                        jc.setDialogTitle("Save File...");
                        retval = jc.showSaveDialog(this);
                        if (retval == JFileChooser.APPROVE_OPTION) {
                            fws = new PrintWriter(new FileWriter(jc.getSelectedFile()));

                        }
                        String save = textArea.getText();
                        StringTokenizer st = new StringTokenizer(save, System.getProperty("line.separator"));
                        while (st.hasMoreElements()) {
                            fws.println(st.nextToken());
                        }

                        fws.close();
                        JOptionPane.showMessageDialog(rootPane, "File Saved");
                        filename = jc.getSelectedFile().getName();
                        setTitle(filename);
                    } else {
                        fws = new PrintWriter(new FileWriter(filename));
                        String save = textArea.getText();
                        StringTokenizer st = new StringTokenizer(save, System.getProperty("line.separator"));
                        while (st.hasMoreElements()) {
                            fws.println(st.nextToken());

                        }

                        fws.close();
                        JOptionPane.showMessageDialog(rootPane, "File Saved");

                    }
                } catch (IOException e) {
                    System.out.println(e);
                }
                textArea.setText(null);
                setTitle("Untitled Notepad");
                filename = null;
                filecontent = null;

            }
        } else {
            textArea.setText(null);
            setTitle("Untitled Notepad");
            filename = null;
            filecontent = null;
        }

    }//GEN-LAST:event_NewFileActionPerformed

    private void mnitmOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnitmOpenActionPerformed

//        jc.setDialogTitle("Open A File...");
//        try {
//            int retval = jc.showOpenDialog(this);
//            if (retval == JFileChooser.APPROVE_OPTION) {
//                textArea.setText(null);
//                Reader in = new FileReader(jc.getSelectedFile());
//                char[] buff = new char[100000];
//                int nch;
//                
//                while ((nch = in.read(buff, 0, buff.length)) != -1) {
//                    textArea.append(new String(buff, 0, nch));
//                }
//                
//            }
//                        
//            filename= jc.getSelectedFile().getName();
//                setTitle(filename);
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//
//JFileChooser jc= new JFileChooser();
      jc.setDialogTitle("Open A File...");
       jc.showOpenDialog(null);
       File fo= jc.getSelectedFile();
       try{
           BufferedReader br = new BufferedReader(new FileReader(fo.getPath()));
           String line="";
           String temp="";
           while((temp=br.readLine())!= null)
           {
               line+=temp;
               line+="\n";
           }
           textArea.setText(line);
       }
       catch(IOException e)
        {
            System.out.println(e);
        } 
    }//GEN-LAST:event_mnitmOpenActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        
        PrintWriter fws= null;
        int retval=-1;
        try{
            if(filename==null)
            { 
                jc.setDialogTitle("Save File...");
                retval= jc.showSaveDialog(this);
                if(retval== JFileChooser.APPROVE_OPTION)
            {
                fws=  new PrintWriter(new FileWriter(jc.getSelectedFile()));
                
            }
                String save= textArea.getText();
                StringTokenizer st= new StringTokenizer(save, System.getProperty("line.separator"));
                while(st.hasMoreElements())
                {
                    fws.println(st.nextToken());
                }
                
                fws.close();
                JOptionPane.showMessageDialog(rootPane, "File Saved");
                filename= jc.getSelectedFile().getName();
                setTitle(filename);
            }
            else
            {
            fws=  new PrintWriter(new FileWriter(filename));
            String save= textArea.getText();
                StringTokenizer st= new StringTokenizer(save, System.getProperty("line.separator"));
                while(st.hasMoreElements())
                {
                    fws.println(st.nextToken());
                    
                }
                
                fws.close();
                JOptionPane.showMessageDialog(rootPane, "File Saved");
                
            }
            }
            
            catch(IOException e)
            {
                System.out.println(e);
            }            
            
            
    }//GEN-LAST:event_SaveActionPerformed

    private void SaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveAsActionPerformed

       PrintWriter fws= null;
        int retval=-1;
        try{
                jc.setDialogTitle("Save File...");
                retval= jc.showSaveDialog(this);
                if(retval== JFileChooser.APPROVE_OPTION)
                {
                fws=  new PrintWriter(new FileWriter(jc.getSelectedFile()));
                
                }
                 String saveas= textArea.getText();
                 StringTokenizer st= new StringTokenizer(saveas, System.getProperty("line.separator"));
                while(st.hasMoreElements())
                {
                    fws.println(st.nextToken());
                }
                
                fws.close();
                JOptionPane.showMessageDialog(rootPane, "File Saved");
                filename= jc.getSelectedFile().getName();
                setTitle(filename);
                 
            
            }
        catch(IOException e){
            e.printStackTrace();
            }

    }//GEN-LAST:event_SaveAsActionPerformed

    private void mnitmExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnitmExitActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_mnitmExitActionPerformed

    private void iundoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iundoActionPerformed
        
    }//GEN-LAST:event_iundoActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem15ActionPerformed

    private void mnitmStatusBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnitmStatusBarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnitmStatusBarActionPerformed

    private void mnitmViewhelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnitmViewhelpActionPerformed
        // TODO add your handling code here:
        //new LineNumberTextAreaTest().setVisible(true);
    }//GEN-LAST:event_mnitmViewhelpActionPerformed

    private void mnitmAboutNotepadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnitmAboutNotepadActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_mnitmAboutNotepadActionPerformed

    private void textAreaCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_textAreaCaretUpdate
                lines.setText(getText());
    }//GEN-LAST:event_textAreaCaretUpdate

    private void CutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CutActionPerformed
        textArea.cut();
    }//GEN-LAST:event_CutActionPerformed

    private void PasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasteActionPerformed
        textArea.paste();
    }//GEN-LAST:event_PasteActionPerformed

    private void CopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopyActionPerformed
        textArea.copy();
    }//GEN-LAST:event_CopyActionPerformed

    private void iredoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iredoActionPerformed
        UndoManager manager= new UndoManager();
        try {
		manager.redo();
	    } 
        catch (Exception ex) {}
    }//GEN-LAST:event_iredoActionPerformed

    private void textAreaInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_textAreaInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_textAreaInputMethodTextChanged

    public String getText() {
            int caretPosition = textArea.getDocument().getLength();
            Element root = textArea.getDocument().getDefaultRootElement();
            String text = "1" + System.getProperty("line.separator");
               for(int i = 2; i < root.getElementIndex(caretPosition) + 2; i++) {
                  text += i + System.getProperty("line.separator");
               }
            return text;
         }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main_Frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Copy;
    private javax.swing.JMenuItem Cut;
    private javax.swing.JMenu File;
    private javax.swing.JMenuBar MainMenu;
    private javax.swing.JMenuItem NewFile;
    private javax.swing.JMenuItem Paste;
    private javax.swing.JInternalFrame Project_Tree;
    private javax.swing.JMenuItem Save;
    private javax.swing.JMenuItem SaveAs;
    private javax.swing.JMenuItem iredo;
    private javax.swing.JMenuItem iundo;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JInternalFrame jInternalFrame2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTree jTree1;
    private javax.swing.JTextArea lines;
    private javax.swing.JMenu mEdit;
    private javax.swing.JMenu mFormat;
    private javax.swing.JMenu mHelp;
    private javax.swing.JMenu mView;
    private javax.swing.JMenuItem mnitmAboutNotepad;
    private javax.swing.JMenuItem mnitmDelete;
    private javax.swing.JMenuItem mnitmExit;
    private javax.swing.JMenuItem mnitmFind;
    private javax.swing.JMenuItem mnitmFindNext;
    private javax.swing.JMenuItem mnitmFindPrevious;
    private javax.swing.JMenuItem mnitmFont;
    private javax.swing.JMenuItem mnitmGoTo;
    private javax.swing.JMenuItem mnitmOpen;
    private javax.swing.JMenuItem mnitmReplace;
    private javax.swing.JMenuItem mnitmSelectAll;
    private javax.swing.JMenuItem mnitmSendFeedback;
    private javax.swing.JCheckBoxMenuItem mnitmStatusBar;
    private javax.swing.JMenuItem mnitmTimeDate;
    private javax.swing.JMenuItem mnitmViewhelp;
    private javax.swing.JMenuItem mnitmWordWrap;
    private javax.swing.JMenu mnitmZoom;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
